AWSTemplateFormatVersion: '2010-09-09'
Description: Medusa E-commerce Application on AWS ECS Fargate (Single AZ, No ALBs)

Parameters:
  # Parameters for database credentials (to be securely stored in Secrets Manager)
  MasterUsername:
    Type: String
    Description: Username for the Medusa RDS PostgreSQL database.
    Default: postgres
  MasterPassword:
    Type: String
    Description: Password for the Medusa RDS PostgreSQL database. IMPORTANT: Change this default to a strong, unique password!
    Default: password # REMINDER: Superior MUST change this to a strong, secure password
    NoEcho: true # Prevents the password from being displayed in CloudFormation events

  # Parameters for Medusa secrets
  MedusaJwtSecret:
    Type: String
    Description: Secret key for Medusa JWTs.
    Default: replace-with-a-very-long-random-string-for-jwt-secret # REMINDER: Superior MUST change this to a strong, random string
  MedusaCookieSecret:
    Type: String
    Description: Secret key for Medusa cookies.
    Default: replace-with-another-very-long-random-string-for-cookie-secret # REMINDER: Superior MUST change this to a strong, random string

Resources:
  # 1. AWS Secrets Manager Secret for Database and Medusa Application Secrets
  MedusaSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Stores sensitive credentials for Medusa application (DB, JWT, Cookie secrets).
      SecretString: !Sub |
        {
          "username": "${MasterUsername}",
          "password": "${MasterPassword}",
          "jwt_secret": "${MedusaJwtSecret}",
          "cookie_secret": "${MedusaCookieSecret}"
        }

  # 2. VPC for the Medusa application
  MedusaVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MedusaVPC

  # 3. Public Subnet (only one for single AZ deployment)
  MedusaPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MedusaVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ''] # Automatically picks first AZ in region
      MapPublicIpOnLaunch: true # Allows instances in this subnet to get public IPs
      Tags:
        - Key: Name
          Value: MedusaPublicSubnet1

  # 4. Private Subnet (only one for single AZ deployment)
  MedusaPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MedusaVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs ''] # Must be in the same AZ as Public Subnet 1 for internal routing
      Tags:
        - Key: Name
          Value: MedusaPrivateSubnet1

  # 5. Internet Gateway (Allows communication between VPC and the Internet)
  MedusaInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MedusaInternetGateway

  # 6. Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MedusaVPC
      InternetGatewayId: !Ref MedusaInternetGateway

  # 7. Route Table for Public Subnet
  MedusaPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MedusaVPC
      Tags:
        - Key: Name
          Value: MedusaPublicRouteTable

  # 8. Route to Internet Gateway from Public Route Table
  MedusaPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MedusaPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MedusaInternetGateway

  # 9. Associate Public Subnet with Public Route Table
  MedusaPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MedusaPublicSubnet1
      RouteTableId: !Ref MedusaPublicRouteTable

  # 10. NAT Gateway (for private subnet to access the internet outbound)
  #     Ensure the EIP is provisioned before the NAT Gateway.
  MedusaNatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: MedusaNatGatewayEIP
  MedusaNATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachGateway # Ensure IGW is attached before NAT Gateway
    Properties:
      AllocationId: !GetAtt MedusaNatGatewayEIP.AllocationId
      SubnetId: !Ref MedusaPublicSubnet1 # NAT Gateway must be in a public subnet
      Tags:
        - Key: Name
          Value: MedusaNATGateway

  # 11. Route Table for Private Subnet
  MedusaPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MedusaVPC
      Tags:
        - Key: Name
          Value: MedusaPrivateRouteTable

  # 12. Route to NAT Gateway from Private Route Table
  MedusaPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MedusaPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MedusaNATGateway

  # 13. Associate Private Subnet with Private Route Table
  MedusaPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MedusaPrivateSubnet1
      RouteTableId: !Ref MedusaPrivateRouteTable

  # 14. RDS Security Group (Allows traffic from ECS tasks)
  MedusaDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Medusa RDS PostgreSQL database.
      VpcId: !Ref MedusaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432 # PostgreSQL default port
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt MedusaECSTaskSecurityGroup.GroupId # Allow traffic from ECS tasks
      Tags:
        - Key: Name
          Value: MedusaDBSecurityGroup

  # 15. ElastiCache Security Group (Allows traffic from ECS tasks)
  MedusaCacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Medusa ElastiCache Redis.
      VpcId: !Ref MedusaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379 # Redis default port
          ToPort: 6379
          SourceSecurityGroupId: !GetAtt MedusaECSTaskSecurityGroup.GroupId # Allow traffic from ECS tasks
      Tags:
        - Key: Name
          Value: MedusaCacheSecurityGroup

  # 16. ECS Task Security Group (Allows ECS Tasks to talk to DB and Redis, and now public)
  MedusaECSTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Medusa ECS Fargate tasks.
      VpcId: !Ref MedusaVPC
      SecurityGroupIngress:
        # Allow HTTP traffic to Medusa Storefront (port 8000) and Backend (port 9000) from anywhere
        - IpProtocol: tcp
          FromPort: 8000 # Storefront default port
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9000 # Backend default port
          ToPort: 9000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: MedusaECSTaskSecurityGroup

  # 17. IAM Role for ECS Task Execution (Allows ECS tasks to pull images and write logs)
  MedusaECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MedusaECSTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy # Provides permissions for ECS tasks to pull images and publish logs
      Tags:
        - Key: Name
          Value: MedusaECSTaskExecutionRole

  # 18. IAM Role for ECS Tasks (Allows ECS tasks to access Secrets Manager)
  MedusaECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MedusaECSTaskRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SecretsManagerAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref MedusaSecrets # Allows access to the MedusaSecrets
      Tags:
        - Key: Name
          Value: MedusaECSTaskRole

  # 19. CloudWatch Log Group for Medusa Backend
  MedusaBackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/medusa-backend
      RetentionInDays: 7 # Retain logs for 7 days
      Tags:
        - Key: Name
          Value: MedusaBackendLogGroup

  # 20. CloudWatch Log Group for Medusa Storefront
  MedusaStorefrontLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/medusa-storefront
      RetentionInDays: 7 # Retain logs for 7 days
      Tags:
        - Key: Name
          Value: MedusaStorefrontLogGroup

  # 21. Medusa RDS PostgreSQL Database
  MedusaDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: medusa-postgres-db
      DBName: medusadb
      Engine: postgres
      EngineVersion: '14.5' # Or a version compatible with Medusa
      DBInstanceClass: db.t3.micro # Cost-effective instance type for demo
      AllocatedStorage: 20 # GB
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterPassword
      VPCSecurityGroups:
        - !GetAtt MedusaDBSecurityGroup.GroupId
      DBSubnetGroupName: !Ref MedusaDBSubnetGroup # Associate with DB subnet group
      PubliclyAccessible: false # Database should not be publicly accessible
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: MedusaDatabase

  # 22. RDS DB Subnet Group (for private subnet)
  MedusaDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for Medusa RDS instance.
      SubnetIds:
        - !Ref MedusaPrivateSubnet1
      Tags:
        - Key: Name
          Value: MedusaDBSubnetGroup

  # 23. ElastiCache Subnet Group (for private subnet)
  MedusaCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnets for Medusa ElastiCache Redis.
      SubnetIds:
        - !Ref MedusaPrivateSubnet1
      Tags:
        - Key: Name
          Value: MedusaCacheSubnetGroup

  # 24. ElastiCache Redis Cluster (single node for demo)
  MedusaRedis:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupId: medusa-redis-cluster
      ReplicationGroupDescription: Medusa Redis Cache
      Engine: redis
      CacheNodeType: cache.t3.micro # Cost-effective node type for demo
      NumCacheClusters: 1 # Single node for demo
      Port: 6379
      PreferredMaintenanceWindow: mon:05:00-mon:06:00
      SecurityGroupIds:
        - !GetAtt MedusaCacheSecurityGroup.GroupId
      CacheSubnetGroupName: !Ref MedusaCacheSubnetGroup
      Tags:
        - Key: Name
          Value: MedusaRedis

  # 25. ECS Cluster
  MedusaECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MedusaECSCluster
      Tags:
        - Key: Name
          Value: MedusaECSCluster

  # 26. ECS Task Definition for Medusa Backend
  MedusaBackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: medusa-backend-task
      Cpu: '256' # 0.25 vCPU
      Memory: '512' # 0.5 GB
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt MedusaECSTaskExecutionRole.Arn # For ECS to pull images and send logs
      TaskRoleArn: !GetAtt MedusaECSTaskRole.Arn # For Medusa to access secrets
      ContainerDefinitions:
        - Name: medusa-backend-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/medusa-backend:latest" # Replace with your ECR URI
          PortMappings:
            - ContainerPort: 9000 # Medusa backend default port
              Protocol: tcp
          Environment:
            - Name: DATABASE_URL
              Value: !Sub "postgres://${MasterUsername}:${MasterPassword}@${MedusaDatabase.Endpoint.Address}:5432/medusadb"
            - Name: REDIS_URL
              Value: !Sub "redis://${MedusaRedis.PrimaryEndPoint.Address}:6379"
            - Name: JWT_SECRET
              Value: !Join [ '', [ '{{resolve:secretsmanager:', !Ref MedusaSecrets, '}}' ] ] # From Secrets Manager
            - Name: COOKIE_SECRET
              Value: !Join [ '', [ '{{resolve:secretsmanager:', !Ref MedusaSecrets, '}}' ] ] # From Secrets Manager
            - Name: NODE_ENV
              Value: production
            # Add other necessary Medusa environment variables here
            # For local demo, you might need to set STORE_CORS and ADMIN_CORS if you have frontend
            - Name: STORE_CORS
              Value: http://localhost:8000,* # Adjust for local frontend testing. For deployed storefront, use its public IP/DNS
            - Name: ADMIN_CORS
              Value: http://localhost:7000,* # Adjust for local admin testing.
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MedusaBackendLogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: medusa-backend

  # 27. ECS Task Definition for Medusa Storefront
  MedusaStorefrontTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: medusa-storefront-task
      Cpu: '256' # 0.25 vCPU
      Memory: '512' # 0.5 GB
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt MedusaECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt MedusaECSTaskRole.Arn
      ContainerDefinitions:
        - Name: medusa-storefront-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/medusa-storefront:latest" # Replace with your ECR URI
          PortMappings:
            - ContainerPort: 8000 # Storefront default port
              Protocol: tcp
          Environment:
            # These are for the NEXT.js storefront to connect to the Medusa backend
            - Name: NEXT_PUBLIC_MEDUSA_BACKEND_URL
              Value: !Sub "http://${MedusaBackendService.Tasks.PublicIP}:9000" # This will need manual update after deployment
            - Name: NEXT_PUBLIC_BASE_URL
              Value: !Sub "http://${MedusaStorefrontService.Tasks.PublicIP}:8000" # This will need manual update after deployment
            - Name: NEXT_PUBLIC_DEFAULT_REGION
              Value: us
            # Add other necessary storefront environment variables here
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MedusaStorefrontLogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: medusa-storefront

  # 28. ECS Service for Medusa Backend
  #     Launches and maintains the desired number of backend tasks.
  MedusaBackendService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref MedusaECSCluster
      TaskDefinition: !Ref MedusaBackendTaskDefinition
      DesiredCount: 1 # Run one instance of the backend for demo
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED # Now explicitly public
          Subnets:
            - !Ref MedusaPublicSubnet1 # Now in public subnet
          SecurityGroups:
            - !GetAtt MedusaECSTaskSecurityGroup.GroupId # ECS Task SG for internal communication and public ingress
      Tags:
        - Key: Name
          Value: MedusaBackendService

  # 29. ECS Service for Medusa Storefront
  #     Launches and maintains the desired number of storefront tasks.
  MedusaStorefrontService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref MedusaECSCluster
      TaskDefinition: !Ref MedusaStorefrontTaskDefinition
      DesiredCount: 1 # Run one instance of the storefront for demo
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED # Now explicitly public
          Subnets:
            - !Ref MedusaPublicSubnet1 # Now in public subnet
          SecurityGroups:
            - !GetAtt MedusaECSTaskSecurityGroup.GroupId # ECS Task SG for internal communication and public ingress
      Tags:
        - Key: Name
          Value: MedusaStorefrontService

Outputs:
  # Optionally, output the Cluster Name for easy reference
  ECSClusterName:
    Description: The name of the ECS Cluster.
    Value: !Ref MedusaECSCluster
    Export:
      Name: MedusaECSClusterName