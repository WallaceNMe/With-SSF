{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Medusa E-commerce Application on AWS ECS Fargate",
  "Parameters": {
    "MasterUsername": {
      "Type": "String",
      "Description": "Username for the Medusa RDS PostgreSQL database.",
      "Default": "postgres"
    },
    "MasterPassword": {
      "Type": "String",
      "Description": "Password for the Medusa RDS PostgreSQL database. IMPORTANT: Change this default to a strong, unique password!",
      "Default": "password",
      "NoEcho": true
    },
    "MedusaJwtSecret": {
      "Type": "String",
      "Description": "Secret key for Medusa JWTs.",
      "Default": "replace-with-a-very-long-random-string-for-jwt-secret"
    },
    "MedusaCookieSecret": {
      "Type": "String",
      "Description": "Secret key for Medusa cookies.",
      "Default": "replace-with-another-very-long-random-string-for-cookie-secret"
    }
  },
  "Resources": {
    "MedusaSecrets": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Description": "Stores sensitive credentials for Medusa application (DB, JWT, Cookie secrets).",
        "SecretString": {
          "Fn::Sub": "{\n          \"username\": \"${MasterUsername}\",\n          \"password\": \"${MasterPassword}\",\n          \"jwt_secret\": \"${MedusaJwtSecret}\",\n          \"cookie_secret\": \"${MedusaCookieSecret}\"\n        }"
        }
      }
    },
    "MedusaDatabase": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBSubnetGroupName": {
          "Ref": "MedusaDBSubnetGroup"
        },
        "DBName": "medusa-db",
        "Engine": "postgres",
        "EngineVersion": "10.19",
        "MasterUsername": {
          "Ref": "MasterUsername"
        },
        "MasterUserPassword": {
          "Ref": "MasterPassword"
        },
        "DBInstanceClass": "db.t3.micro",
        "AllocatedStorage": 20,
        "StorageType": "gp2",
        "PubliclyAccessible": false,
        "MultiAZ": false,
        "BackupRetentionPeriod": 0,
        "VPCSecurityGroups": [
          {
            "Fn::GetAtt": [
              "MedusaDBSecurityGroup",
              "GroupId"
            ]
          }
        ]
      }
    },
    "MedusaDBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow inbound traffic to Medusa RDS PostgreSQL instance from ECS Fargate tasks.",
        "VpcId": {
          "Ref": "MedusaVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 5432,
            "ToPort": 5432,
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "MedusaECSTaskSecurityGroup",
                "GroupId"
              ]
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaDBSecurityGroup"
          }
        ]
      }
    },
    "MedusaVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaVPC"
          }
        ]
      }
    },
    "MedusaInternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaInternetGateway"
          }
        ]
      }
    },
    "MedusaVPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "MedusaVPC"
        },
        "InternetGatewayId": {
          "Ref": "MedusaInternetGateway"
        }
      }
    },
    "MedusaPublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "MedusaVPC"
        },
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaPublicSubnet1"
          }
        ]
      }
    },
    "MedusaPublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "MedusaVPC"
        },
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaPublicSubnet2"
          }
        ]
      }
    },
    "MedusaPrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "MedusaVPC"
        },
        "CidrBlock": "10.0.3.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaPrivateSubnet1"
          }
        ]
      }
    },
    "MedusaPrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "MedusaVPC"
        },
        "CidrBlock": "10.0.4.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaPrivateSubnet2"
          }
        ]
      }
    },
    "MedusaNatGatewayEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "MedusaNatGateway": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "MedusaNatGatewayEIP",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "MedusaPublicSubnet1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaNatGateway"
          }
        ]
      }
    },
    "MedusaPublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "MedusaVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaPublicRouteTable"
          }
        ]
      }
    },
    "MedusaPublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "MedusaPublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "MedusaInternetGateway"
        }
      }
    },
    "MedusaPublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "MedusaPublicSubnet1"
        },
        "RouteTableId": {
          "Ref": "MedusaPublicRouteTable"
        }
      }
    },
    "MedusaPublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "MedusaPublicSubnet2"
        },
        "RouteTableId": {
          "Ref": "MedusaPublicRouteTable"
        }
      }
    },
    "MedusaPrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "MedusaVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaPrivateRouteTable"
          }
        ]
      }
    },
    "MedusaPrivateRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "MedusaPrivateRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "MedusaNatGateway"
        }
      }
    },
    "MedusaPrivateSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "MedusaPrivateSubnet1"
        },
        "RouteTableId": {
          "Ref": "MedusaPrivateRouteTable"
        }
      }
    },
    "MedusaPrivateSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "MedusaPrivateSubnet2"
        },
        "RouteTableId": {
          "Ref": "MedusaPrivateRouteTable"
        }
      }
    },
    "MedusaCacheCluster": {
      "Type": "AWS::ElastiCache::ReplicationGroup",
      "Properties": {
        "CacheNodeType": "cache.t3.micro",
        "Engine": "redis",
        "EngineVersion": "6.x",
        "NumCacheClusters": 1,
        "ReplicationGroupDescription": "Redis cluster for Medusa application",
        "Port": 6379,
        "PreferredMaintenanceWindow": "sun:05:00-sun:06:00",
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "MedusaCacheSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "SnapshotRetentionLimit": 0,
        "TransitEncryptionEnabled": true,
        "AtRestEncryptionEnabled": false,
        "AutomaticFailoverEnabled": false,
        "CacheSubnetGroupName": {
          "Ref": "MedusaDBSubnetGroup"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaCacheCluster"
          }
        ]
      }
    },
    "MedusaCacheSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow inbound traffic to Medusa ElastiCache instance from ECS Fargate tasks.",
        "VpcId": {
          "Ref": "MedusaVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 6379,
            "ToPort": 6379,
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "MedusaECSTaskSecurityGroup",
                "GroupId"
              ]
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaCacheSecurityGroup"
          }
        ]
      }
    },
    "MedusaDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnet group for Medusa RDS and ElastiCache instances.",
        "SubnetIds": [
          {
            "Ref": "MedusaPrivateSubnet1"
          },
          {
            "Ref": "MedusaPrivateSubnet2"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaDBSubnetGroup"
          }
        ]
      }
    },
    "MedusaECSTaskSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for Medusa ECS Fargate tasks.",
        "VpcId": {
          "Ref": "MedusaVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaECSTaskSecurityGroup"
          }
        ]
      }
    },
    "MedusaECSCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": "MedusaEcsCluster",
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaEcsCluster"
          }
        ]
      }
    },
    "MedusaECSTaskExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "MedusaEcsTaskExecutionRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
          "arn:aws:iam::aws:policy/AmazonECRContainerRegistryReadOnly"
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaEcsTaskExecutionRole"
          }
        ]
      }
    },
    "MedusaBackendTaskRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "MedusaBackendTaskRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "MedusaBackendAccessPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "secretsmanager:GetSecretValue",
                    "secretsmanager:DescribeSecret"
                  ],
                  "Resource": {
                    "Ref": "MedusaSecrets"
                  }
                }
              ]
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaBackendTaskRole"
          }
        ]
      }
    },
    "MedusaBackendLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/ecs/medusa-backend",
        "RetentionInDays": 7,
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaBackendLogGroup"
          }
        ]
      }
    },
    "MedusaStorefrontLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/ecs/medusa-storefront",
        "RetentionInDays": 7,
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaStorefrontLogGroup"
          }
        ]
      }
    },
    "MedusaBackendTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": "medusa-backend-task",
        "Cpu": "1024",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE"
        ],
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "MedusaECSTaskExecutionRole",
            "Arn"
          ]
        },
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "MedusaBackendTaskRole",
            "Arn"
          ]
        },
        "ContainerDefinitions": [
          {
            "Name": "medusa-backend-container",
            "Image": {
              "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/medusa-backend:latest"
            },
            "PortMappings": [
              {
                "ContainerPort": 9000,
                "Protocol": "tcp"
              }
            ],
            "Environment": [
              {
                "Name": "NODE_ENV",
                "Value": "production"
              },
              {
                "Name": "MEDUSA_BACKEND_URL",
                "Value": "http://0.0.0.0:9000"
              },
              {
                "Name": "DATABASE_TYPE",
                "Value": "postgres"
              },
              {
                "Name": "DATABASE_DATABASE",
                "Value": "medusa-db"
              },
              {
                "Name": "DATABASE_HOST",
                "Value": {
                  "Fn::GetAtt": [
                    "MedusaDatabase",
                    "Endpoint.Address"
                  ]
                }
              },
              {
                "Name": "DATABASE_PORT",
                "Value": {
                  "Fn::GetAtt": [
                    "MedusaDatabase",
                    "Endpoint.Port"
                  ]
                }
              },
              {
                "Name": "REDIS_URL",
                "Value": {
                  "Fn::Sub": "redis://${MedusaCacheCluster.PrimaryEndPoint.Address}:${MedusaCacheCluster.PrimaryEndPoint.Port}"
                }
              },
              {
                "Name": "CORS_ORIGINS",
                "Value": {
                  "Fn::Sub": "http://${MedusaStorefrontALB.DNSName},http://localhost:8000"
                }
              }
            ],
            "Secrets": [
              {
                "Name": "DATABASE_USERNAME",
                "ValueFrom": {
                  "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${MedusaSecrets}:username::"
                }
              },
              {
                "Name": "DATABASE_PASSWORD",
                "ValueFrom": {
                  "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${MedusaSecrets}:password::"
                }
              },
              {
                "Name": "JWT_SECRET",
                "ValueFrom": {
                  "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${MedusaSecrets}:jwt_secret::"
                }
              },
              {
                "Name": "COOKIE_SECRET",
                "ValueFrom": {
                  "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${MedusaSecrets}:cookie_secret::"
                }
              }
            ],
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "MedusaBackendLogGroup"
                },
                "awslogs-region": {
                  "Ref": "AWS::Region"
                },
                "awslogs-stream-prefix": "medusa-backend"
              }
            }
          }
        ]
      }
    },
    "MedusaStorefrontTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": "medusa-storefront-task",
        "Cpu": "512",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE"
        ],
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "MedusaECSTaskExecutionRole",
            "Arn"
          ]
        },
        "ContainerDefinitions": [
          {
            "Name": "medusa-storefront-container",
            "Image": {
              "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/medusa-storefront:latest"
            },
            "PortMappings": [
              {
                "ContainerPort": 8000,
                "Protocol": "tcp"
              }
            ],
            "Environment": [
              {
                "Name": "NODE_ENV",
                "Value": "production"
              },
              {
                "Name": "NEXT_PUBLIC_MEDUSA_BACKEND_URL",
                "Value": {
                  "Fn::Sub": "http://${MedusaBackendALB.DNSName}"
                }
              },
              {
                "Name": "NEXT_PUBLIC_BASE_URL",
                "Value": {
                  "Fn::Sub": "http://${MedusaStorefrontALB.DNSName}"
                }
              },
              {
                "Name": "NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY",
                "Value": "pk_1526a1701b4f755788a1b5f72c6454d0f0a37a929a6d2ddbb9b8c0a9a99b9348"
              },
              {
                "Name": "NEXT_PUBLIC_DEFAULT_REGION",
                "Value": "us"
              },
              {
                "Name": "NEXT_PUBLIC_STRIPE_KEY",
                "Value": ""
              }
            ],
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "MedusaStorefrontLogGroup"
                },
                "awslogs-region": {
                  "Ref": "AWS::Region"
                },
                "awslogs-stream-prefix": "medusa-storefront"
              }
            }
          }
        ]
      }
    },
    "MedusaStorefrontALB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Scheme": "internet-facing",
        "Subnets": [
          {
            "Ref": "MedusaPublicSubnet1"
          },
          {
            "Ref": "MedusaPublicSubnet2"
          }
        ],
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "MedusaALBSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaStorefrontALB"
          }
        ]
      }
    },
    "MedusaStorefrontTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "MedusaStorefrontTG",
        "Port": 8000,
        "Protocol": "HTTP",
        "VpcId": {
          "Ref": "MedusaVPC"
        },
        "TargetType": "ip",
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPath": "/",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 2,
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaStorefrontTG"
          }
        ]
      }
    },
    "MedusaStorefrontListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "LoadBalancerArn": {
          "Ref": "MedusaStorefrontALB"
        },
        "Port": 80,
        "Protocol": "HTTP",
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "MedusaStorefrontTargetGroup"
            }
          }
        ]
      }
    },
    "MedusaBackendALB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Scheme": "internet-facing",
        "Subnets": [
          {
            "Ref": "MedusaPublicSubnet1"
          },
          {
            "Ref": "MedusaPublicSubnet2"
          }
        ],
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "MedusaALBSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaBackendALB"
          }
        ]
      }
    },
    "MedusaBackendTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "MedusaBackendTG",
        "Port": 9000,
        "Protocol": "HTTP",
        "VpcId": {
          "Ref": "MedusaVPC"
        },
        "TargetType": "ip",
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPath": "/health",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 2,
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaBackendTG"
          }
        ]
      }
    },
    "MedusaBackendListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "LoadBalancerArn": {
          "Ref": "MedusaBackendALB"
        },
        "Port": 9000,
        "Protocol": "HTTP",
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "MedusaBackendTargetGroup"
            }
          }
        ]
      }
    },
    "MedusaALBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow HTTP access to the ALBs.",
        "VpcId": {
          "Ref": "MedusaVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 9000,
            "ToPort": 9000,
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaALBSecurityGroup"
          }
        ]
      }
    },
    "MedusaBackendService": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "MedusaECSCluster"
        },
        "TaskDefinition": {
          "Ref": "MedusaBackendTaskDefinition"
        },
        "DesiredCount": 1,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "DISABLED",
            "Subnets": [
              {
                "Ref": "MedusaPrivateSubnet1"
              },
              {
                "Ref": "MedusaPrivateSubnet2"
              }
            ],
            "SecurityGroups": [
              {
                "Fn::GetAtt": [
                  "MedusaECSTaskSecurityGroup",
                  "GroupId"
                ]
              }
            ]
          }
        },
        "LoadBalancers": [
          {
            "ContainerName": "medusa-backend-container",
            "ContainerPort": 9000,
            "TargetGroupArn": {
              "Ref": "MedusaBackendTargetGroup"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaBackendService"
          }
        ]
      }
    },
    "MedusaStorefrontService": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "MedusaECSCluster"
        },
        "TaskDefinition": {
          "Ref": "MedusaStorefrontTaskDefinition"
        },
        "DesiredCount": 1,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "DISABLED",
            "Subnets": [
              {
                "Ref": "MedusaPrivateSubnet1"
              },
              {
                "Ref": "MedusaPrivateSubnet2"
              }
            ],
            "SecurityGroups": [
              {
                "Fn::GetAtt": [
                  "MedusaECSTaskSecurityGroup",
                  "GroupId"
                ]
              }
            ]
          },
        "LoadBalancers": [
          {
            "ContainerName": "medusa-storefront-container",
            "ContainerPort": 8000,
            "TargetGroupArn": {
              "Ref": "MedusaStorefrontTargetGroup"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "MedusaStorefrontService"
          }
        ]
      }
    }
  },
  "Outputs": {
    "MedusaStorefrontURL": {
      "Description": "The URL for the Medusa Storefront application.",
      "Value": {
        "Fn::GetAtt": [
          "MedusaStorefrontALB",
          "DNSName"
        ]
      },
      "Export": {
        "Name": "MedusaStorefrontURL"
      }
    },
    "MedusaBackendAPIURL": {
      "Description": "The URL for the Medusa Backend API.",
      "Value": {
        "Fn::GetAtt": [
          "MedusaBackendALB",
          "DNSName"
        ]
      },
      "Export": {
        "Name": "MedusaBackendAPIURL"
      }
    },
    "ECSClusterName": {
      "Description": "The name of the ECS Cluster.",
      "Value": {
        "Ref": "MedusaECSCluster"
      },
      "Export": {
        "Name": "MedusaECSClusterName"
      }
    }
  }
}
}